{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["theme","global","font","family","size","height","App","React","useState","location","setLocation","users","setUsers","numUsers","setNumUsers","COUNTRIES","countries","setCountries","show","setShow","Grommet","Main","pad","Heading","level","textAlign","WorldMap","color","fill","places","name","latlng","onClick","Select","options","placeholder","value","labelKey","valueKey","onChange","event","countryName","option","axios","get","then","response","data","items","slice","total_count","onSearch","searchText","console","log","regexp","RegExp","filter","o","match","dropHeight","Layer","overflow","onEsc","onClickOutside","width","Box","margin","align","alignContent","alignSelf","justify","toLocaleString","Grid","columns","map","user","key","id","direction","elevation","Image","fit","src","avatar_url","login","Button","label","Text","Anchor","href","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"i9WAKMA,EAAQ,CACZC,OAAQ,CACNC,KAAM,CACJC,OAAQ,SACRC,KAAM,OACNC,OAAQ,UA0GCC,MArGf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,IADlC,mBACNC,EADM,KACIC,EADJ,OAEaH,IAAMC,SAAS,IAF5B,mBAENG,EAFM,KAECC,EAFD,OAGmBL,IAAMC,SAAS,GAHlC,mBAGNK,EAHM,KAGIC,EAHJ,OAIqBP,IAAMC,SAASO,GAJpC,mBAINC,EAJM,KAIKC,EAJL,OAKWV,IAAMC,UAAS,GAL1B,mBAKNU,EALM,KAKAC,EALA,KA0Bb,OACE,kBAACC,EAAA,EAAD,CAASpB,MAAOA,GACd,kBAACqB,EAAA,EAAD,CAAMC,IAAK,UACT,kBAACC,EAAA,EAAD,CAASC,MAAO,EAAGC,UAAU,UAA7B,qBACA,kBAACC,EAAA,EAAD,CACEC,MAAM,UACNC,KAAK,aACLC,OAAQpB,EAAW,CACjB,CACEqB,KAAMrB,EAASqB,KACfrB,SAAUA,EAASsB,OACnBJ,MAAO,YACPK,QAAS,kBAAMb,GAAQ,MAEvB,KAGN,kBAACc,EAAA,EAAD,CACEC,QAASlB,EACTmB,YAAa,mBACbC,MAAO3B,EACP4B,SAAU,OACVC,SAAU,SACVC,SAlCS,SAACC,GARK,IAACC,EAStB/B,EAAY8B,EAAME,QATID,EAUPD,EAAME,OAAOZ,KAT5Ba,IAAMC,IAAN,yDAA4DH,EAA5D,oBACGI,MAAK,SAAAC,GACJlC,EAASkC,EAASC,KAAKC,MAAMC,MAAM,EAAE,KACrCnC,EAAYgC,EAASC,KAAKG,iBAuCxBC,SA9BS,SAACC,GAChBC,QAAQC,IAAI,YAAaF,GACzB,IAAMG,EAAS,IAAIC,OAAOJ,EAAY,KACtCnC,EAAaF,EAAU0C,QAAO,SAAAC,GAAC,OAAIA,EAAE5B,KAAK6B,MAAMJ,QA4B1CK,WAAY,WAGb1C,GACC,kBAAC2C,EAAA,EAAD,CACEC,SAAU,SACVC,MAAO,kBAAM5C,GAAQ,IACrB6C,eAAgB,kBAAM7C,GAAQ,KAE9B,kBAACE,EAAA,EAAD,CAAM4C,MAAM,QAAQH,SAAU,UAC5B,kBAACI,EAAA,EAAD,CAAKC,OAAQ,SAAUC,MAAM,SAASC,aAAa,SAASC,UAAU,SAASC,QAAQ,UACrF,4BAAK1D,EAAS2D,kBACd,sDACyB/D,EAASqB,OAGpC,kBAAC2C,EAAA,EAAD,CACEC,QAAS,CAAC,MAAO,OACjBP,OAAO,SAENxD,EAAMgE,KAAI,SAAAC,GAAI,OACb,kBAACV,EAAA,EAAD,CAAKW,IAAKD,EAAKE,GAAIC,UAAU,MAAMC,UAAU,QAAQb,OAAO,SAC1D,kBAACD,EAAA,EAAD,CAAKD,MAAM,UAAU5D,OAAO,WAC1B,kBAAC4E,EAAA,EAAD,CACEC,IAAI,UACJC,IAAKP,EAAKQ,cAGd,kBAAClB,EAAA,EAAD,CAAKK,QAAQ,SAASjD,IAAI,SACvBsD,EAAKS,YAMd,kBAACC,EAAA,EAAD,CAAQnB,OAAO,QAAQoB,MAAM,QAAQvD,QAAS,kBAAMb,GAAQ,QAIlE,kBAACqE,EAAA,EAAD,CAAM/D,UAAU,SAAS0C,OAAO,SAAhC,YAEE,kBAACsB,EAAA,EAAD,CAAQC,KAAK,sBAAsBH,MAAM,cAF3C,SAIE,kBAACE,EAAA,EAAD,CAAQC,KAAK,yBAAyBH,MAAM,gBCjGlCI,QACW,cAA7BC,OAAOnF,SAASoF,UAEe,UAA7BD,OAAOnF,SAASoF,UAEhBD,OAAOnF,SAASoF,SAASlC,MACvB,2DCbNmC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,MAAK,SAAAwD,GACjCA,EAAaC,kB","file":"static/js/main.e92800ab.chunk.js","sourcesContent":["import React from 'react';\nimport { Grommet, WorldMap, Select, Box, Image, Main, Layer, Button, Grid, Heading, Text, Anchor } from 'grommet';\nimport COUNTRIES from \"../constants/countries.json\";\nimport axios from \"axios\";\n\nconst theme = {\n  global: {\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nfunction App() {\n  const [location, setLocation] = React.useState(\"\")\n  const [users, setUsers] = React.useState([])\n  const [numUsers, setNumUsers] = React.useState(0)\n  const [countries, setCountries] = React.useState(COUNTRIES)\n  const [show, setShow] = React.useState(false)\n\n  const getGithubUsers = (countryName) => {\n    axios.get(`https://api.github.com/search/users?q=location:${countryName}&sort=followers`)\n      .then(response => {\n        setUsers(response.data.items.slice(0,10))\n        setNumUsers(response.data.total_count)\n      })\n  }\n\n  const onChange = (event) => {\n    setLocation(event.option)\n    getGithubUsers(event.option.name)\n  }\n\n  const onSearch = (searchText) => {\n    console.log('searching', searchText)\n    const regexp = new RegExp(searchText, 'i');\n    setCountries(COUNTRIES.filter(o => o.name.match(regexp)));\n  }\n\n  return (\n    <Grommet theme={theme}>\n      <Main pad={\"medium\"}>\n        <Heading level={2} textAlign=\"center\">Find Github Users</Heading>\n        <WorldMap\n          color=\"light-3\"\n          fill=\"horizontal\"\n          places={location ? [\n            {\n              name: location.name,\n              location: location.latlng,\n              color: 'status-ok',\n              onClick: () => setShow(true)\n            }\n          ] : []}\n        />\n\n        <Select\n          options={countries}\n          placeholder={\"Choose a country\"}\n          value={location}\n          labelKey={\"name\"}\n          valueKey={\"latlng\"}\n          onChange={onChange}\n          onSearch={onSearch}\n          dropHeight={\"medium\"}\n        />\n\n        {show && (\n          <Layer\n            overflow={\"scroll\"}\n            onEsc={() => setShow(false)}\n            onClickOutside={() => setShow(false)}\n          >\n            <Main width=\"large\" overflow={\"scroll\"}>\n              <Box margin={\"medium\"} align=\"center\" alignContent=\"center\" alignSelf=\"center\" justify=\"center\">\n                <h1>{numUsers.toLocaleString()}</h1>\n                <div>\n                  Total Github Users in {location.name}\n                </div>\n              </Box>\n              <Grid\n                columns={[\"1/2\", \"1/2\"]}\n                margin=\"small\"\n              >\n                {users.map(user => (\n                  <Box key={user.id} direction=\"row\" elevation=\"small\" margin=\"small\">\n                    <Box width=\"xxsmall\" height=\"xxsmall\">\n                      <Image\n                        fit=\"contain\"\n                        src={user.avatar_url}\n                      />\n                    </Box>\n                    <Box justify=\"center\" pad=\"small\">\n                      {user.login}\n                    </Box>\n                  </Box>\n                ))}\n\n              </Grid>\n              <Button margin=\"small\" label=\"close\" onClick={() => setShow(false)} />\n            </Main>\n        </Layer>\n        )}\n        <Text textAlign=\"center\" margin=\"large\">\n          {`Built by `}\n          <Anchor href=\"https://rongying.co\" label=\"Rong Ying\" />\n          {` with `} \n          <Anchor href=\"https://v2.grommet.io/\" label=\"Grommet\" />\n        </Text>\n      </Main>\n    </Grommet>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}