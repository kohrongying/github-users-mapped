{"version":3,"sources":["components/UserDetail.js","components/Popup.js","components/App.js","serviceWorker.js","index.js"],"names":["UserDetail","user","Box","direction","elevation","margin","width","height","Image","fit","src","avatar_url","justify","pad","Text","size","truncate","login","Popup","numUsers","locationName","users","setShow","Layer","overflow","onEsc","onClickOutside","Main","align","alignContent","alignSelf","toLocaleString","Grid","columns","map","key","id","Button","label","onClick","theme","global","font","family","App","React","useState","location","setLocation","setUsers","setNumUsers","COUNTRIES","countries","setCountries","show","Grommet","Heading","level","textAlign","Select","options","placeholder","value","labelKey","valueKey","onChange","event","countryName","option","name","axios","get","then","response","data","items","slice","total_count","onSearch","searchText","regexp","RegExp","filter","o","match","dropHeight","WorldMap","color","fill","places","latlng","Anchor","href","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c41e8de4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Image, Text } from 'grommet';\n\nconst UserDetail = ({ user }) => (\n  <Box direction=\"row\" elevation=\"small\" margin=\"small\">\n    <Box width=\"xxsmall\" height=\"xxsmall\">\n      <Image\n        fit=\"contain\"\n        src={user.avatar_url}\n      />\n    </Box>\n    <Box justify=\"center\" pad=\"small\">\n      <Text size=\"small\" truncate={true}>{user.login}</Text>\n    </Box>\n  </Box>\n)\n\nUserDetail.propTypes = {\n  user: PropTypes.object\n}\n\nexport default UserDetail;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Text, Main, Layer, Button, Grid } from 'grommet';\nimport UserDetail from \"./UserDetail\";\n\nconst Popup = ({ numUsers, locationName, users, setShow }) => (\n  <Layer\n      overflow={\"scroll\"}\n      onEsc={() => setShow(false)}\n      onClickOutside={() => setShow(false)}\n    >\n      <Main width=\"large\" overflow={\"scroll\"}>\n        <Box margin={\"medium\"} align=\"center\" alignContent=\"center\" alignSelf=\"center\" justify=\"center\">\n          <h1>{numUsers.toLocaleString()}</h1>\n          <Text>\n            Total Github Users in {locationName}\n          </Text>\n        </Box>\n        <Grid\n          columns={[\"1/2\", \"1/2\"]}\n          margin=\"small\"\n        >\n          {users.map(user => (\n            <UserDetail key={user.id} user={user} />\n          ))}\n\n        </Grid>\n        <Button margin=\"small\" label=\"close\" onClick={() => setShow(false)} />\n      </Main>\n  </Layer>\n)\n\nPopup.propTypes = {\n  numUsers: PropTypes.number,\n  users: PropTypes.array,\n  setShow: PropTypes.func.isRequired,\n  locationName: PropTypes.string,\n};\n\nexport default Popup;","import React from 'react';\nimport { Grommet, WorldMap, Select, Main, Heading, Text, Anchor } from 'grommet';\nimport COUNTRIES from \"../constants/countries.json\";\nimport axios from \"axios\";\nimport Popup from \"./Popup\";\n\nconst theme = {\n  global: {\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nfunction App() {\n  const [location, setLocation] = React.useState(\"\")\n  const [users, setUsers] = React.useState([])\n  const [numUsers, setNumUsers] = React.useState(0)\n  const [countries, setCountries] = React.useState(COUNTRIES)\n  const [show, setShow] = React.useState(false)\n\n  const getGithubUsers = (countryName) => {\n    axios.get(`https://api.github.com/search/users?q=location:${countryName}&sort=followers`)\n      .then(response => {\n        setUsers(response.data.items.slice(0,10))\n        setNumUsers(response.data.total_count)\n      })\n  }\n\n  const onChange = (event) => {\n    setLocation(event.option)\n    getGithubUsers(event.option.name)\n  }\n\n  const onSearch = (searchText) => {\n    const regexp = new RegExp(searchText, 'i');\n    setCountries(COUNTRIES.filter(o => o.name.match(regexp)));\n  }\n\n  return (\n    <Grommet theme={theme}>\n      <Main pad={\"medium\"}>\n        <Heading \n          level={2}\n          textAlign=\"center\"\n          alignSelf=\"center\"\n        >\n          Find Github Users\n        </Heading>\n\n        <Select\n          options={countries}\n          placeholder={\"Choose a country\"}\n          value={location}\n          labelKey={\"name\"}\n          valueKey={\"latlng\"}\n          onChange={onChange}\n          onSearch={onSearch}\n          dropHeight={\"medium\"}\n          margin={\"small\"}\n        />\n\n        <WorldMap\n          color={location ? \"light-6\" : \"dark-6\"}\n          fill=\"horizontal\"\n          places={location ? [\n            {\n              name: location.name,\n              location: location.latlng,\n              color: 'status-ok',\n              onClick: () => setShow(true)\n            }\n          ] : []}\n        />\n\n        {show && (\n          <Popup\n            users={users}\n            numUsers={numUsers}\n            setShow={setShow}\n            locationName={location.name}\n          />\n        )}\n\n        <Text textAlign=\"center\" margin=\"large\">\n          {`Built by `}\n          <Anchor href=\"https://rongying.co\" label=\"Rong Ying\" />\n          {` with `} \n          <Anchor href=\"https://v2.grommet.io/\" label=\"Grommet\" />\n        </Text>\n      </Main>\n    </Grommet>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}